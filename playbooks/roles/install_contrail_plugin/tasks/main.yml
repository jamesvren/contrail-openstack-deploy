---
- name: set instance data
  set_fact:
    instance_data: "{{ instances[hostvars[inventory_hostname].instance_name] }}"
  tags:
   - always

- name: set instance name
  set_fact:
    instance_name: "{{ hostvars[inventory_hostname].instance_name }}"
  tags:
   - always

- name: set contrail configuration param
  set_fact:
   contrail_configuration: {}
  when: contrail_configuration is undefined
  tags:
   - always

- name: set orchestrator param
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CLOUD_ORCHESTRATOR': orchestrator}) }}"
  when:
    - orchestrator is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR is not defined
  tags:
   - always

- name: set KEYSTONE_AUTH_ADMIN_PASSWORD
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'KEYSTONE_AUTH_ADMIN_PASSWORD': kolla_config.kolla_passwords.keystone_admin_password }) }}"
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
    - kolla_config is defined
    - kolla_config.kolla_passwords is defined
    - kolla_config.kolla_passwords.keystone_admin_password is defined
  tags:
   - always

- name: set contrail api ip
  set_fact:
    api_server_ip: "{{ item.value.ip }}"
  when: 
    - item.value.roles is defined
    - item.value.roles.config is defined
    - contrail_configuration.CONTROLLER_NODES is undefined
  with_dict: "{{ instances }}"
  tags:
    - always

- name: set contrail api ip if vip is set
  set_fact:
    api_server_ip: "{{ contrail_configuration.CONTROLLER_NODES }}"
  when: contrail_configuration.CONTROLLER_NODES is defined
  tags:
    - always

- name: set collector ip
  set_fact:
    collector_ip: "{{ item.value.ip }}"
  when: 
    - item.value.roles is defined
    - item.value.roles.config is defined
    - contrail_configuration.CONTROLLER_NODES is undefined
  with_dict: "{{ instances }}"
  tags:
    - always

- name: set collector ip if vip is set
  set_fact:
    collector_ip: "{{ contrail_configuration.CONTROLLER_NODES }}"
  when: contrail_configuration.CONTROLLER_NODES is defined
  tags:
    - always

- debug:
    msg: "api_server_ip {{ api_server_ip }}, collector_ip {{ collector_ip }}"

- name: set container tag contrail version to master if not defined
  set_fact:
    contrail_version_tag: latest
  when: contrail_configuration.CONTRAIL_VERSION is undefined
  tags:
   - always

- name: set container tag contrail version if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.CONTRAIL_VERSION }}"
  when: contrail_configuration.CONTRAIL_VERSION is defined
  tags:
   - always

- name: add openstack version tag if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.OPENSTACK_VERSION }}-{{ contrail_version_tag }}"
  when: contrail_configuration.OPENSTACK_VERSION is defined
  tags:
   - always

- name: add linux distr tag if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_version_tag }}"
  when: contrail_configuration.LINUX_DISTR is defined
  tags:
   - always

- name: set registry to opencontrailnightly if undefined
  set_fact:
    container_registry: opencontrailnightly
  when: global_configuration is not defined or (global_configuration is defined and global_configuration.CONTAINER_REGISTRY is undefined)
  tags:
   - always
- name: set registry if defined
  set_fact:
    container_registry: "{{ global_configuration.CONTAINER_REGISTRY }}"
  when:
    - global_configuration is defined
    - global_configuration.CONTAINER_REGISTRY is defined
  tags:
   - always

- name: activate docker login                                                                                                                                                               
  shell: "docker login --username {{ global_configuration.CONTAINER_REGISTRY_USERNAME }} --password {{ global_configuration.CONTAINER_REGISTRY_PASSWORD }} {{ container_registry }}"        
  when:                                                                                                                                                                                     
    - global_configuration is defined                                                                                                                                                       
    - global_configuration.CONTAINER_REGISTRY_USERNAME is defined                                                                                                                           
    - global_configuration.CONTAINER_REGISTRY_PASSWORD is defined                                                                                                                           
  tags:                                                                                                                                                                                     
   - always                                                                                                                                                                                 

- name: set stdin_open to true if it's not defined
  set_fact:
    stdin_open: true
  when: contrail_configuration.STDIN_OPEN is undefined
  tags:
   - always

- name: set stdin_open to specified value if defined
  set_fact:
    stdin_open: "{{ contrail_configuration.STDIN_OPEN }}"
  when: contrail_configuration.STDIN_OPEN is defined
  tags:
   - always

- name: set tty to true if it's not defined
  set_fact:
    tty: true
  when: contrail_configuration.TTY is undefined
  tags:
   - always

- name: set tty to specified value if defined
  set_fact:
    tty: "{{ contrail_configuration.TTY }}"
  when: contrail_configuration.TTY is defined
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'vrouter', 'webui']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is undefined
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'vrouter', 'webui', 'openstack']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
  tags:
   - always

- set_fact:
    default_roles_hosts: {}
  tags:
   - always

- name: add roles if not defined
  set_fact:
     default_roles_hosts: "{{ default_roles_hosts|combine({item.key: default_roles}, recursive=True) }}"
  when: item.value.roles is undefined
  with_dict: "{{ instances }}"
  tags:
   - always

- name: add roles if defined
  set_fact:
     default_roles_hosts: "{{ default_roles_hosts|combine({item.key: item.value.roles}, recursive=True) }}"
  when: item.value.roles is defined
  with_dict: "{{ instances }}"
  tags:
   - always

- debug:
    msg: "instance_data {{instance_data}}"

- include_tasks: install_neutron_plugin.yml
  name: install neutron plugin
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
    - instance_data.roles.openstack is defined 
  tags:
   - install

- include_tasks: install_nova_plugin.yml
  name: install contrail nova_plugin
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
    - instance_data.roles.openstack_compute is defined 
  tags:
   - install

- include_tasks: config_vrouter.yml
  name: configure vrouter
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
    - instance_data.roles.vrouter is defined 
  tags:
   - install

